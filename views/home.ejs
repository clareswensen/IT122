<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>React App</title>
  <link rel="stylesheet" href="/css/styles.css" type="text/css">
  <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
  <!-- Don't use this in production: -->
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>

<h2>Home</h2>

<hr>

<div id="root"></div>
<script type="text/babel">
    
    const Oysters = (props) => {
        // props is an array
        const listItems = props.data.map((item) =>
            <li key={item._id} id={item._id} onClick={props.clickHandler}>
                {item.name}
            </li>);
        return <ul>{listItems}</ul>
    }

    const ItemDetail = (props) => {
        return <div>
            <hr/>
            <h3>Oyster Details</h3>
            <form>
                Name: <input type="text" name="name" onChange={props.onChange} value={props.item.name || ""}/> <br/>
                Scientific Name: <input type="text" onChange={props.onChange} name="scientificName" value={props.item.scientificName || ""}/> <br/>
                Origin: <input type="text" onChange={props.onChange} name="origin" value={props.item.origin || ""}/> <br/>
                Flavor: <input type="text" onChange={props.onChange} name="flavor" value={props.item.flavor || ""}/>  
            </form>
            <button name="clear" onClick={props.clearForm}>Clear</button>&nbsp;
            <button name="save" onClick={props.saveItem}>Save</button>&nbsp;
            <button name="delete" onClick={props.deleteItem}>Delete</button>
        </div>
    }

    class OysterApp extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                items: <%- oysters %>,
                currentItem: {}
            };
            this.selectItem = this.selectItem.bind(this);
            this.handleChange = this.handleChange.bind(this);
            this.clearForm = this.clearForm.bind(this);
            this.saveItem = this.saveItem.bind(this);
            this.deleteItem = this.deleteItem.bind(this);
        }
        
        // click event handler
        selectItem = (event) => {
            const found = this.state.items.find((item) => {
                return item.name === event.target.innerText;
            });
            this.setState({currentItem: found})
        }

        handleChange = (event) => {
                let newItem = this.state.currentItem;
                newItem[event.target.name] = event.target.value;
                this.setState({currentItem: newItem});
        }

        clearForm = () => {
            this.setState({currentItem: {}})
        }

        saveItem = () => {
            // save edits to backend DB
            console.log(this.state.currentItem)
            if (this.state.currentItem == {}) return
            let newItem = this.state.currentItem;
            fetch("/api/add/", {
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(newItem)
            })
                .then(res => res.json())
                .then((json) => {
                    console.log(json)
                    // if this new item, add to list of items
                    if (!newItem.id) {
                        newItem.id = json.id
                        let newList = this.state.items;
                        newList.push(newItem);
                        this.setState({items: newList});
                    }
                });
        }

        deleteItem = () => {
            if (this.state.currentItem === {}) return
            let deleteId = this.state.currentItem._id
            let url = "/api/delete/"+deleteId;
            fetch(url)
                .then(res => res.json())
                .then((json) => {
                    // if delete succeeded, update master list
                    if (json.deleted.deletedCount > 0) {
                        let newList = this.state.items.filter(item => {
                            return item._id !== deleteId;
                        })
                        this.setState({items: newList, currentItem: {}})
                    }
                })
        }
    
    render() {
        return (
            <div> <h2>Oysters</h2>
                <Oysters data={this.state.items} clickHandler={this.selectItem} />
                <ItemDetail
                item={this.state.currentItem}
                onChange={this.handleChange}
                clearForm={this.clearForm}
                saveItem={this.saveItem}
                deleteItem={this.deleteItem}
                />
            </div>);
    }  

} 

    ReactDOM.render(
        <div><OysterApp /></div>,
        document.getElementById('root')
    );
</script>
</body>
</html>